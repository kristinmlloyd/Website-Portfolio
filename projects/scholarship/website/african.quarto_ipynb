{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Security Incidents in Palestine: Trends and Patterns (2002-2025)\"\n",
        "format:\n",
        "  html:\n",
        "    toc: true\n",
        "    toc-depth: 3\n",
        "    code-fold: true\n",
        "    number-sections: true\n",
        "    theme: cosmo\n",
        "    fig-width: 9\n",
        "    fig-height: 6\n",
        "    fig-dpi: 300\n",
        "    self-contained: true\n",
        "execute:\n",
        "  warning: false\n",
        "  message: false\n",
        "editor: visual\n",
        "---"
      ],
      "id": "1a1105b4"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: setup\n",
        "#| include: false\n",
        "\n",
        "# Import required libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import folium\n",
        "from folium.plugins import MarkerCluster\n",
        "from matplotlib.colors import LinearSegmentedColormap\n",
        "import warnings\n",
        "import plotly.express as px\n",
        "import plotly.graph_objects as go\n",
        "from IPython.display import display\n",
        "from scipy import stats\n",
        "\n",
        "# Configure plot settings\n",
        "plt.rcParams['figure.figsize'] = (10, 6)\n",
        "warnings.filterwarnings('ignore', category=FutureWarning)\n",
        "sns.set_theme(style=\"whitegrid\")\n",
        "\n",
        "# Set consistent color palette\n",
        "palette = {\"primary\": \"#FFBD59\", \"secondary\": \"#64C1FF\", \"danger\": \"#FF5252\"}\n",
        "\n",
        "# Load and prepare data\n",
        "df = pd.read_csv(\"data/security_incidents_cleaned.csv\")\n",
        "country_data = df[df['country'] == 'Central African Republic']"
      ],
      "id": "setup",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Executive Summary\n",
        "\n",
        "# Background: The Conflict\n",
        "\n",
        "![](images/african.png)\n",
        "\n",
        "## Historical Context\n",
        "\n",
        "## Recent Escalation\n",
        "\n",
        "# Temporal Trends in Security Incidents {#sec-temporal}\n",
        "\n",
        "## Incident Frequency Over Time\n"
      ],
      "id": "06bb21d8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-yearly-incidents\n",
        "#| fig-cap: Security incidents in Palestine from 2002 to 2025\n",
        "#| echo: false\n",
        "\n",
        "# Group incidents by year\n",
        "yearly_incidents = country_data.groupby('year').size().reset_index(name='incidents')\n",
        "\n",
        "# Create line chart\n",
        "fig = px.line(\n",
        "    yearly_incidents, \n",
        "    x='year', \n",
        "    y='incidents',\n",
        "    markers=True,\n",
        "    labels={'incidents': 'Number of Incidents', 'year': 'Year'},\n",
        "    height=500\n",
        ")\n",
        "\n",
        "# Configure layout\n",
        "fig.update_layout(\n",
        "    title=None,\n",
        "    xaxis=dict(tickmode='linear', dtick=2),\n",
        "    yaxis=dict(zeroline=True),\n",
        "    hovermode='x unified',\n",
        "    template='plotly_white'\n",
        ")\n",
        "\n",
        "# Add range slider\n",
        "fig.update_xaxes(rangeslider_visible=True)\n",
        "\n",
        "# Add event annotations\n",
        "events = [\n",
        "    {'year': 2006, 'event': 'Hamas takes control of Gaza', 'y_position': 5},\n",
        "    {'year': 2014, 'event': 'Israel-Hamas conflict', 'y_position': 10},\n",
        "    {'year': 2018, 'event': 'Gaza border protests', 'y_position': 8},\n",
        "    {'year': 2021, 'event': '11-day conflict', 'y_position': 7},\n",
        "    {'year': 2023, 'event': 'Oct 7 Hamas attack', 'y_position': 15},\n",
        "    {'year': 2024, 'event': 'Gaza war escalation', 'y_position': 65}\n",
        "]\n",
        "\n",
        "for event in events:\n",
        "    fig.add_annotation(\n",
        "        x=event['year'],\n",
        "        y=event['y_position'],\n",
        "        text=event['event'],\n",
        "        showarrow=True,\n",
        "        arrowhead=1,\n",
        "        ax=0,\n",
        "        ay=-20,\n",
        "        font=dict(size=10),\n",
        "        bgcolor=\"rgba(255,255,255,0.85)\",\n",
        "        bordercolor=\"black\",\n",
        "        borderwidth=1,\n",
        "        borderpad=3\n",
        "    )\n",
        "\n",
        "fig.show()"
      ],
      "id": "fig-yearly-incidents",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Analysis of Incident Trends\n",
        "\n",
        "## Effected Indivudals Over Time\n"
      ],
      "id": "1b31c697"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-yearly-affected\n",
        "#| fig-cap: Total affected individuals in Palestine from 2002 to 2025\n",
        "#| echo: false\n",
        "\n",
        "# Group by year and sum total_affected\n",
        "yearly_affected = (\n",
        "    country_data.groupby('year')['total_affected']\n",
        "    .sum()\n",
        "    .reset_index()\n",
        "    .rename(columns={'total_affected': 'affected'})\n",
        ")\n",
        "\n",
        "# Create line chart\n",
        "fig = px.line(\n",
        "    yearly_affected, \n",
        "    x='year', \n",
        "    y='affected',\n",
        "    markers=True,\n",
        "    labels={'affected': 'Total Affected Individuals', 'year': 'Year'},\n",
        "    height=500\n",
        ")\n",
        "\n",
        "# Configure layout\n",
        "fig.update_layout(\n",
        "    title=None,\n",
        "    xaxis=dict(tickmode='linear', dtick=2),\n",
        "    yaxis=dict(zeroline=True),\n",
        "    hovermode='x unified',\n",
        "    template='plotly_white'\n",
        ")\n",
        "\n",
        "# Add range slider\n",
        "fig.update_xaxes(rangeslider_visible=True)\n",
        "\n",
        "fig.show()"
      ],
      "id": "fig-yearly-affected",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Analysis of Humans Impacted\n",
        "\n",
        "# Nature of Security Incidents {#sec-nature}\n",
        "\n",
        "## Predominant Attack Types\n"
      ],
      "id": "680919bd"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-attack-types\n",
        "#| fig-cap: Most common types of attacks in Palestine\n",
        "#| echo: false\n",
        "\n",
        "# Analyzing means of attack\n",
        "attack_counts = country_data['means_of_attack'].value_counts().reset_index()\n",
        "attack_counts.columns = ['Attack Type', 'Count']\n",
        "attack_counts = attack_counts.sort_values('Count', ascending=False).head(10)\n",
        "\n",
        "# Create horizontal bar chart with uniform color\n",
        "fig_attacks = px.bar(\n",
        "    attack_counts,\n",
        "    y='Attack Type',\n",
        "    x='Count',\n",
        "    title=None,\n",
        "    height=500,\n",
        "    orientation='h'\n",
        ")\n",
        "\n",
        "# Set all bars to primary color\n",
        "fig_attacks.update_traces(marker_color=palette[\"primary\"])\n",
        "\n",
        "# Configure layout\n",
        "fig_attacks.update_layout(\n",
        "    yaxis={'categoryorder': 'total ascending'},\n",
        "    xaxis_title=\"Number of Incidents\",\n",
        "    yaxis_title=None\n",
        ")\n",
        "\n",
        "fig_attacks.show()"
      ],
      "id": "fig-attack-types",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Analysis of Attack Methods\n",
        "\n",
        "## Attack Contexts\n",
        "\n",
        "### Analysis of Attack Contexts\n",
        "\n",
        "# Human Impact of Security Incidents {#sec-impact}\n",
        "\n",
        "## Casualties by Category\n"
      ],
      "id": "fcd41413"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-casualties\n",
        "#| fig-cap: Total casualties in Palestine by category\n",
        "#| echo: false\n",
        "\n",
        "# Create data for stacked bar chart\n",
        "stacked_data = {\n",
        "    'Category': ['Nationals', 'Internationals'],\n",
        "    'Killed': [\n",
        "        country_data['nationals_killed'].sum(),\n",
        "        country_data['internationals_killed'].sum()\n",
        "    ],\n",
        "    'Wounded': [\n",
        "        country_data['nationals_wounded'].sum(),\n",
        "        country_data['internationals_wounded'].sum()\n",
        "    ],\n",
        "    'Kidnapped': [\n",
        "        country_data['nationals_kidnapped'].sum(),\n",
        "        country_data['internationals_kidnapped'].sum()\n",
        "    ]\n",
        "}\n",
        "\n",
        "# Convert to DataFrame and reshape for stacking\n",
        "stacked_df = pd.DataFrame(stacked_data)\n",
        "stacked_df_long = pd.melt(\n",
        "    stacked_df,\n",
        "    id_vars=['Category'],\n",
        "    value_vars=['Killed', 'Wounded', 'Kidnapped'],\n",
        "    var_name='Status',\n",
        "    value_name='Count'\n",
        ")\n",
        "\n",
        "# Create a stacked bar chart\n",
        "fig_stacked = px.bar(\n",
        "    stacked_df_long,\n",
        "    x='Category',\n",
        "    y='Count',\n",
        "    color='Status',\n",
        "    title=None,\n",
        "    barmode='stack',\n",
        "    height=500,\n",
        "    color_discrete_map={\n",
        "        'Killed': palette[\"danger\"], \n",
        "        'Wounded': palette[\"primary\"], \n",
        "        'Kidnapped': palette[\"secondary\"]\n",
        "    }\n",
        ")\n",
        "\n",
        "# Improve layout\n",
        "fig_stacked.update_layout(\n",
        "    xaxis_title=None,\n",
        "    yaxis_title=\"Number of People\",\n",
        "    legend_title_text=None\n",
        ")\n",
        "\n",
        "fig_stacked.show()"
      ],
      "id": "fig-casualties",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Analysis of Casualty Patterns\n",
        "\n",
        "## Gender Distribution of Affected Individuals\n"
      ],
      "id": "39d2a2e0"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-gender\n",
        "#| fig-cap: Gender distribution of affected individuals\n",
        "#| echo: false\n",
        "\n",
        "# Check if we have gender data\n",
        "gender_cols = ['gender_male', 'gender_female']\n",
        "if all(col in country_data.columns for col in gender_cols):\n",
        "    # Sum up total counts by gender\n",
        "    gender_totals = {\n",
        "        'Gender': ['Male', 'Female'],\n",
        "        'Count': [\n",
        "            country_data['gender_male'].sum(),\n",
        "            country_data['gender_female'].sum()\n",
        "        ]\n",
        "    }\n",
        "\n",
        "    # Convert to DataFrame\n",
        "    gender_df = pd.DataFrame(gender_totals)\n",
        "\n",
        "    # Create simple bar chart\n",
        "    fig_gender = px.bar(\n",
        "        gender_df,\n",
        "        x='Gender',\n",
        "        y='Count',\n",
        "        title=None,\n",
        "        height=450\n",
        "    )\n",
        "\n",
        "    # Set primary color for bars\n",
        "    fig_gender.update_traces(marker_color=palette[\"primary\"])\n",
        "\n",
        "    # Improve layout\n",
        "    fig_gender.update_layout(\n",
        "        xaxis_title=None,\n",
        "        yaxis_title=\"Number of Individuals\"\n",
        "    )\n",
        "\n",
        "    fig_gender.show()"
      ],
      "id": "fig-gender",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Analysis of Gender Patterns\n",
        "\n",
        "# Organizations and Actors {#sec-organizations}\n",
        "\n",
        "## Organizations Affected by Security Incidents\n"
      ],
      "id": "67f7978a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-organizations\n",
        "#| fig-cap: Security incidents by organization type\n",
        "#| echo: false\n",
        "\n",
        "# Count incidents affecting different organization types\n",
        "org_cols = ['un', 'ingo', 'icrc', 'nrcs_and_ifrc', 'nngo', 'other']\n",
        "\n",
        "# Create a summary of total incidents by organization type\n",
        "org_totals = country_data[org_cols].sum().reset_index()\n",
        "org_totals.columns = ['Organization Type', 'Total Incidents']\n",
        "\n",
        "# Better labels for organization types\n",
        "org_labels = {\n",
        "    'un': 'United Nations',\n",
        "    'ingo': 'International NGO',\n",
        "    'icrc': 'Int. Committee of Red Cross',\n",
        "    'nrcs_and_ifrc': 'National Red Cross/Red Crescent',\n",
        "    'nngo': 'National NGO',\n",
        "    'other': 'Other Organizations'\n",
        "}\n",
        "\n",
        "# Map the short names to full names\n",
        "org_totals['Organization'] = org_totals['Organization Type'].map(org_labels)\n",
        "\n",
        "# Sort by total incidents\n",
        "org_totals = org_totals.sort_values('Total Incidents', ascending=False)\n",
        "\n",
        "# Create a horizontal bar chart\n",
        "fig_orgs = px.bar(\n",
        "    org_totals,\n",
        "    y='Organization',\n",
        "    x='Total Incidents',\n",
        "    title=None,\n",
        "    height=500,\n",
        "    orientation='h'\n",
        ")\n",
        "\n",
        "# Set all bars to primary color\n",
        "fig_orgs.update_traces(marker_color=palette[\"primary\"])\n",
        "\n",
        "# Improve layout\n",
        "fig_orgs.update_layout(\n",
        "    yaxis_title=None,\n",
        "    xaxis_title=\"Number of Incidents\",\n",
        "    yaxis={'categoryorder': 'total ascending'}\n",
        ")\n",
        "\n",
        "fig_orgs.show()"
      ],
      "id": "fig-organizations",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Analysis of Organizational Impact\n",
        "\n",
        "## Comparison of Actor Types\n"
      ],
      "id": "1490e413"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: fig-actors\n",
        "#| fig-cap: Host State vs Foreign Actors in Security Incidents\n",
        "#| echo: false\n",
        "\n",
        "# Filter only for Host State and Foreign actors\n",
        "relevant_actors = ['Host state', 'Foreign or coalition forces']\n",
        "actor_data = country_data[country_data['actor_type'].isin(relevant_actors)]\n",
        "\n",
        "# Check if we have data for these specific actors\n",
        "if len(actor_data) > 0:\n",
        "    actor_counts = actor_data['actor_type'].value_counts().reset_index()\n",
        "    actor_counts.columns = ['Actor Type', 'Count']\n",
        "    \n",
        "    # Create a column chart\n",
        "    fig_actors = px.bar(\n",
        "        actor_counts,\n",
        "        x='Actor Type',\n",
        "        y='Count',\n",
        "        title=None,\n",
        "        height=450\n",
        "    )\n",
        "    \n",
        "    # Set primary color for all bars\n",
        "    fig_actors.update_traces(marker_color=palette[\"primary\"])\n",
        "    \n",
        "    # Improve layout\n",
        "    fig_actors.update_layout(\n",
        "        xaxis_title=None,\n",
        "        yaxis_title=\"Number of Incidents\"\n",
        "    )\n",
        "    \n",
        "    fig_actors.show()"
      ],
      "id": "fig-actors",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Analysis of Actor Responsibility\n",
        "\n",
        "# Major Incidents {#sec-major}\n",
        "\n",
        "## Top 5 Most Impactful Security Incidents\n"
      ],
      "id": "99d58b5d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: tbl-top-incidents\n",
        "#| tbl-cap: Most impactful security incidents in Palestine (by total affected)\n",
        "#| echo: false\n",
        "\n",
        "if not country_data.empty and 'total_affected' in country_data.columns:\n",
        "    top5_incidents = country_data.sort_values(by='total_affected', ascending=False).head(5)\n",
        "    \n",
        "    # Select and rename columns for display\n",
        "    display_cols = ['year', 'location', 'total_affected', 'total_killed', 'total_wounded', 'attack_context', 'actor_type']\n",
        "    column_names = {\n",
        "        'year': 'Year', \n",
        "        'location': 'Location', \n",
        "        'total_affected': 'Total Affected',\n",
        "        'total_killed': 'Killed', \n",
        "        'total_wounded': 'Wounded',\n",
        "        'attack_context': 'Context',\n",
        "        'actor_type': 'Actor Type'\n",
        "    }\n",
        "    \n",
        "    display_df = top5_incidents[display_cols].rename(columns=column_names)\n",
        "    display(display_df)"
      ],
      "id": "tbl-top-incidents",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Analysis of Major Incidents\n",
        "\n",
        "# Conclusions and Recommendations {#sec-conclusions}\n",
        "\n",
        "## Key Findings\n",
        "\n",
        "## Recommendations\n",
        "\n",
        "### For Security Planning\n",
        "\n",
        "### For Humanitarian Organizations\n",
        "\n",
        "### For Policy Development\n",
        "\n",
        "### For Future Research"
      ],
      "id": "b6488a62"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/opt/miniconda3/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}