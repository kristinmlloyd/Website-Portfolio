# Write the CSV content with headers
readr::write_csv(df, con, col_names = TRUE)
# Close the connection
close(con)
pub_info$data_capture_study <- ifelse(pub_info$article_title %in% data_capturing$article_title, "yes", "no")
table(pub_info$data_capture_study)
pub_info_dc <- pub_info[pub_info$data_capturing == "yes", ]
library(ggplot2)
library(dplyr)
# Define country groups by continent
europe <- c("Czech Republic", "Denmark", "England", "EU", "France", "Germany", "Greece", "Ireland",
"Italy", "Netherlands", "Norway", "Portugal", "Slovenia", "Spain", "Switzerland", "UK")
asia <- c("China", "India", "Indonesia", "Israel", "Japan", "Malaysia", "South Korea", "Taiwan", "Thailand", "UAE")
north_america <- c("USA", "Canada", "Mexico")
south_america <- c("Brazil", "Colombia")
oceania <- c("Australia")
africa <- c("Egypt", "South Africa") # optional
pub_info <- pub_info %>%
mutate(continent = case_when(
country %in% europe ~ "Europe",
country %in% asia ~ "Asia",
country %in% north_america ~ "North America",
country %in% south_america ~ "South America",
country %in% oceania ~ "Oceania",
country %in% africa ~ "Africa",
TRUE ~ NA_character_
))
# Custom continent color palette
continent_colors <- c(
"Americas" = "#4E79A7",
"Europe"   = "#F28E2B",
"Asia"     = "#59A14F",
"Oceania"  = "#E15759",
"Other"    = "#9C755F"
)
# Data prep: count and order countries
country_counts <- pub_info_dc %>%
count(country, Continent) %>%
arrange(Continent, desc(n)) %>%
mutate(country = factor(country, levels = rev(unique(country))))
library(tidyverse)
library(readxl)
library(readr)
pub_info <- read_xlsx("../VR Lit Review/Process_papers.xlsx", sheet = 1)
pub_info <- pub_info %>%
janitor::clean_names()
data_capturing <- read_xlsx("../VR Lit Review/Process_papers.xlsx", sheet = 3, col_names = FALSE)
# make 2nd row the colnames actually
data_capturing <- data_capturing[-1,]
colnames(data_capturing) <- as.character(unlist(data_capturing[1, ]))
data_capturing <- data_capturing[-1, ]
data_capturing <- data_capturing[, -((ncol(data_capturing)-7):ncol(data_capturing))]
data_capturing <- data_capturing %>%
janitor::clean_names()
colnames(data_capturing)[1] <- "article_title"
colnames(pub_info)[1] <- "article_title"
pub_info <- pub_info |>
select(c("article_title", "publication_year", "first_author", "country"))
pub_info_dc <- pub_info %>%
inner_join(data_capturing, by = "article_title")
pub_info_dc <- distinct(pub_info_dc, article_title, .keep_all = TRUE)
pub_info$data_capturing <- ifelse(pub_info$article_title %in% data_capturing$article_title, "yes", "no")
data_capturing <- distinct(data_capturing, article_title, .keep_all = TRUE)
pub_info_clean <- subset(pub_info, !is.na(publication_year))
# Set custom colors: blue for "yes", gray for "no"
custom_colors <- c("yes" = "#4682B4", "no" = "gray80")
ggplot(pub_info_clean, aes(x = factor(publication_year, levels = sort(unique(publication_year))),
fill = data_capturing)) +
geom_bar(color = "black", width = 0.7) +
scale_fill_manual(values = custom_colors) +
labs(
title = "Publication Year of Studies, by Inclusion Status",
subtitle ="A breakdown of all original studies (n=108), distinguished by \ndata capturing studies (n=31) in blue",
x = "Year of Publication",
y = "Number of Studies",
fill = "Data Capturing Study"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12, angle = 45, hjust = 1),
panel.grid.major.y = element_line(color = "grey80"),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "black"),
plot.margin = margin(10, 20, 10, 20),
legend.position = c(0.05, 0.95),  # Top-left inside plot area
legend.justification = c("left", "top"),
legend.background = element_rect(fill = "white", color = "black", size = 0.3)
)
# Open a binary write connection
con <- file("datacapturingWITHauthor_year_clean.csv", open = "wb")
# Write the UTF-8 BOM
writeBin(charToRaw("\ufeff"), con)
# Write the CSV content with headers
readr::write_csv(pub_info_dc, con, col_names = TRUE)
# Close the connection
close(con)
df <- read_csv("/Users/vivianaluccioli/Dropbox/AIMD/results/datacapturingWITHauthor_year_clean.csv")
results <- read_csv("/Users/vivianaluccioli/Dropbox/AIMD/results/results_forpapertable.csv")
results <- results %>%
janitor::clean_names()
library(dplyr)
library(purrr)
df <- df %>%
mutate(data_capturing_method = pmap_chr(
list(eye_tracking, physical_motion_tracking, time_tracking),
~ {
methods <- c(
if (!is.na(..1) && ..1 == "X") "Eye tracking" else NULL,
if (!is.na(..2) && ..2 == "X") "Motion tracking" else NULL,
if (!is.na(..3) && ..3 == "X") "Time tracking" else NULL
)
if (length(methods) == 0) NA_character_ else paste(methods, collapse = ", ")
}
))
# Open a binary write connection
con <- file("results_withallvars.csv", open = "wb")
# Write the UTF-8 BOM
writeBin(charToRaw("\ufeff"), con)
# Write the CSV content with headers
readr::write_csv(df, con, col_names = TRUE)
# Close the connection
close(con)
pub_info$data_capture_study <- ifelse(pub_info$article_title %in% data_capturing$article_title, "yes", "no")
table(pub_info$data_capture_study)
pub_info_dc <- pub_info[pub_info$data_capturing == "yes", ]
custom_colors <- c("yes" = "#4682B4", "no" = "gray80")
ggplot(pub_info_clean, aes(x = factor(publication_year, levels = sort(unique(publication_year))),
fill = data_capturing)) +
geom_bar(color = "black", width = 0.7) +
scale_fill_manual(values = custom_colors) +
labs(
title = "Publication Year of Included Studies",
x = "Year of Publication",
y = "Number of Studies",
fill = "Data Capturing"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12, angle = 45, hjust = 1),
panel.grid.major.y = element_line(color = "grey80"),
panel.grid.major.x = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "black"),
plot.margin = margin(10, 20, 10, 20),
legend.position = c(0.05, 0.95),  # Top-left inside plot area
legend.justification = c("left", "top"),
legend.background = element_rect(fill = "white", color = "black", size = 0.3)
)
table(results$domain)
domain_count <- results %>%
count(domain)
# Define your custom order
custom_order <- c("General education", "Medical education", "Special education",
"Construction training", "Occupational training", "Road safety",
"Physical rehabilitation / activity")
# Reverse the order
reversed_custom_order <- rev(custom_order)
# Then use the reversed order in the factor creation
domain_count <- domain_count %>%
mutate(domain = factor(domain, levels = reversed_custom_order))
# First, create the count data
domain_count <- results %>%
count(domain)
# Define your custom order
custom_order <- c("General education", "Medical education", "Special education",
"Construction training", "Occupational training", "Road safety",
"Physical rehabilitation / activity")
# Then use the reversed order in the factor creation
domain_count <- domain_count %>%
mutate(domain = factor(domain, levels = custom_order))
domain_count <- domain_count %>%
mutate(domain_formatted = case_when(
domain == "Physical rehabilitation / activity" ~ "Physical rehabilitation /\n activity",
TRUE ~ as.character(domain)
))
# Now use the counted data with formatted labels
ggplot(domain_count, aes(x = fct_rev(domain), y = n)) +
geom_col(color = "black", fill = "#4682B4", width = 0.7) +
coord_flip() +
scale_y_continuous(
breaks = 1:(max(domain_count$n)+1),
labels = 1:(max(domain_count$n)+1)
) +
labs(
title = "Studies by Outcome Objective",
x = NULL,
y = "Number of Studies"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
panel.grid.major.y = element_blank()
)
# Add a new column for category grouping
domain_count <- domain_count %>%
mutate(
category = case_when(
domain %in% c("General education", "Medical education", "Special education") ~ "Education setting",
domain %in% c("Construction training", "Occupational training") ~ "Vocational training",
domain %in% c("Road safety","Physical rehabilitation / activity") ~ "Daily life skills",
TRUE ~ "Other"
)
)
# Format domain names with line breaks as needed
domain_count <- domain_count %>%
mutate(domain_formatted = case_when(
domain == "Physical rehabilitation / activity" ~ "Physical rehabilitation /\nactivity",
TRUE ~ as.character(domain)
))
# Define custom colors for each category
category_colors <- c(
"Education setting" = "#4682B4",  # Steel Blue
"Vocational training" = "#8BAD7C",      # Sage Green
"Daily life skills" = "#D95F02"        # Orange
)
order_categories <- c("Education setting", "Vocational training", "Daily life skills")
domain_count <- domain_count %>%
mutate(category = factor(category, levels = order_categories))
# Now use the counted data with formatted labels and category colors
ggplot(domain_count, aes(x = fct_rev(domain), y = n, fill = category)) +
geom_col(color = "black", width = 0.7) +
coord_flip() +
scale_fill_manual(values = category_colors, name = "Educational Category") +
scale_y_continuous(
breaks = 1:(max(domain_count$n)+1),
labels = 1:(max(domain_count$n)+1)
) +
labs(
title = "Data Capturing Studies by Educational Domain",
subtitle = "Of the n=32 data capturing studies",
x = NULL,
y = "Number of Studies"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 12, face = "bold", hjust = 0.5),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
panel.grid.major.y = element_blank(),
legend.position = c(0.9, 0.5),     # x and y coordinates in [0, 1]
legend.justification = c(1, 1),    # how the legend box is justified
legend.background = element_rect(fill = alpha("white", 0.5))
)
results <- results %>%
mutate(domain = factor(domain, levels = custom_order))
# Plot: Studies by Continent and Data Capturing Status
ggplot(results, aes(x = domain, fill = technology)) +
geom_bar(position = "stack", color = "black") +
scale_fill_manual(values = c("VR" = "#4682B4", "AR" = "gray80")) +
labs(
title = "Ar / VR Studies by Domain",
x = "Domain",
y = "Number of Studies",
fill = ""
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.major.x = element_blank()
)
results <- results %>%
mutate(domain = factor(domain, levels = custom_order))
# Plot: Studies by Continent and Data Capturing Status
ggplot(results, aes(x = domain, fill = significant_findings)) +
geom_bar(position = "stack", color = "black") +
scale_fill_manual(values = c("Yes" = "#4682B4", "No" = "gray80")) +
labs(
title = "Ar / VR Studies by Domain",
x = "Domain",
y = "Number of Studies",
fill = ""
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.major.x = element_blank()
)
# First, create the count data
results_count <- results %>%
count(outcome_objective)
custom_order_outcome <- c("Learning improvement", "Ability improvement", "Cognitive load", "Model performance / tool development")
# Create a factor with the desired order
results_count <- results_count %>%
mutate(outcome_objective = factor(outcome_objective, levels = custom_order_outcome))
# Create a new column with formatted labels (with line breaks)
results_count <- results_count %>%
mutate(outcome_formatted = case_when(
outcome_objective == "Model performance / tool development" ~ "Model performance /\ntool development",
outcome_objective == "Learning improvement" ~ "Learning \nimprovement",
outcome_objective == "Ability improvement" ~ "Ability \nimprovement",
TRUE ~ as.character(outcome_objective)
))
custom_order_outcome_formatted <- c("Learning \nimprovement", "Ability \nimprovement", "Cognitive load", "Model performance /\ntool development")
results_count <- results_count %>%
mutate(outcome_formatted = factor(outcome_formatted, levels = custom_order_outcome_formatted))
# Now use the counted data with formatted labels
ggplot(results_count, aes(x = outcome_formatted, y = n)) +
geom_col(color = "black", fill = "#4682B4", width = 0.7) +
coord_flip() +
labs(
title = "Studies by Outcome Objective",
x = NULL,
y = "Number of Studies"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
panel.grid.major.y = element_blank()
) +
# Make sure the y-axis (x after flipping) has enough room for the labels
scale_y_continuous(expand = expansion(mult = c(0, 0.1)))
results <- results %>%
mutate(domain = factor(domain, levels = custom_order))
results <- results %>%
mutate(outcome_objective = factor(outcome_objective, levels = custom_order_outcome))
# Plot: Studies by Continent and Data Capturing Status
ggplot(results, aes(x = domain, fill = outcome_objective)) +
geom_bar(position = "stack", color = "black") +
scale_fill_brewer(palette = "Set1", name = "Outcome objective") +
labs(
title = "Outcome Objective of Studies by Domain",
x = "Domain",
y = "Number of Studies",
fill = ""
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.major.x = element_blank()
)
custom_order_hardware <- c("HMD", "HMD with handheld controller", "Surgical simulation workstation", "Sensor-integrated physical simulator", "Smartphone-based AR interface", "Web-based AR application")
results <- results %>%
mutate(hardware_form_ordered = factor(hardware_form, levels = custom_order_hardware))
ggplot(results, aes(x = hardware_form_ordered, fill = data_capturing_method)) +
geom_bar(position = "stack", color = "black") +
scale_fill_brewer(palette = "Set1", name = "Devices") +
labs(
title = "Outcome Objective of Studies by Domain",
x = "Domain",
y = "Number of Studies",
fill = ""
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.major.x = element_blank()
)
hardware_count <- results %>%
count(hardware_form)
custom_order_hardware <- c("HMD", "HMD with handheld controller", "Surgical simulation workstation", "Sensor-integrated physical simulator", "Smartphone-based AR interface", "Web-based AR application")
results <- results %>%
mutate(hardware_form_ordered = factor(hardware_form, levels = custom_order_hardware))
ggplot(results, aes(x = hardware_form_ordered, fill = technology)) +
geom_bar(position = "stack", color = "black") +
scale_fill_manual(values = c("VR" = "#4682B4", "AR" = "gray80")) +
labs(
title = "Studies by Hardware Form and Technology Type",
subtitle = "Of the n=32 data capturing studies",
x = NULL,
y = "Number of Studies"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 12, face = "bold", hjust = 0.5),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12, angle = 45, hjust = 1),
panel.grid.major.y = element_blank()
) +
# Make sure the y-axis (x after flipping) has enough room for the labels
scale_y_continuous(expand = expansion(mult = c(0, 0.1)))
dc_count <- results %>%
count(data_capturing_method)
custom_order_dc <- c("Eye tracking", "Motion tracking", "Time tracking", "Eye tracking, Motion tracking", "Eye tracking, Time tracking")
# Create a factor with the desired order
dc_count <- dc_count %>%
mutate(data_capturing_method = factor(data_capturing_method, levels = custom_order_dc))
ggplot(dc_count, aes(x = fct_rev(data_capturing_method), y = n)) +
geom_col(color = "black", fill = "#4682B4", width = 0.7) +
coord_flip() +
labs(
title = "Studies by Outcome Objective",
subtitle = "Of the n=32 data capturing studies",
x = NULL,
y = "Number of Studies"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 12, face = "bold", hjust = 0.5),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
panel.grid.major.y = element_blank()
) +
# Make sure the y-axis (x after flipping) has enough room for the labels
scale_y_continuous(expand = expansion(mult = c(0, 0.1)))
ggplot(results, aes(x = hardware_form, fill = data_capturing_method)) +
geom_bar(position = "stack", color = "black") +
scale_fill_brewer(palette = "Set1", name = "Data capturing method") +
labs(
title = "Data capturing methods by Device",
x = "Devices",
y = "Number of Studies",
fill = ""
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.major.x = element_blank()
)
ggplot(results, aes(x = domain, fill = data_capturing_method)) +
geom_bar(position = "stack", color = "black") +
scale_fill_brewer(palette = "Set1", name = "Devices") +
labs(
title = "Outcome Objective of Studies by Domain",
x = "Domain",
y = "Number of Studies",
fill = ""
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.major.x = element_blank()
)
## remember df is created above
ggplot(df, aes(x = data_capturing_method, fill = data_layer_observed_vs_latent)) +
geom_bar(position = "stack", color = "black") +
scale_fill_viridis_d(option = "viridis", name = "Data layer") +
labs(
title = "Data Layer (Observed vs Latent) by data capturing method",
subtitle = "Of the n=32 data capturing studies",
x = "Data capturing method",
y = "Number of Studies",
fill = ""
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.major.x = element_blank()
)
ggplot(df, aes(x = data_capturing_method, fill = variable_type_variable_vs_sequence_based)) +
geom_bar(position = "stack", color = "black") +
scale_fill_viridis_d(option = "plasma", name = "Variable type") +
labs(
title = "Variable type (variable vs. sequential) by Data capturing method",
subtitle = "Of the n=32 data capturing studies",
x = "Data capturing method",
y = "Number of Studies",
fill = ""
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
panel.grid.major.x = element_blank()
)
data_capturing <- read_xlsx("/Users/vivianaluccioli/Dropbox/AIMD/VR Lit Review/Process_papers.xlsx", sheet = 3, col_names = FALSE)
View(df)
layer_count <- df %>%
count(data_layer_observed_vs_latent)
ggplot(layer_count, aes(x = data_layer_observed_vs_latent, y = n)) +
geom_col(color = "black", fill = "#4682B4", width = 0.7) +
coord_flip() +
labs(
title = "Studies by Outcome Objective",
subtitle = "Of the n=32 data capturing studies",
x = NULL,
y = "Number of Studies"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 12, face = "bold", hjust = 0.5),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
panel.grid.major.y = element_blank()
) +
# Make sure the y-axis (x after flipping) has enough room for the labels
scale_y_continuous(expand = expansion(mult = c(0, 0.1)))
var_type <- df %>%
count(variable_type_variable_vs_sequence_based)
ggplot(var_type, aes(x = variable_type_variable_vs_sequence_based, y = n)) +
geom_col(color = "black", fill = "#4682B4", width = 0.7) +
coord_flip() +
labs(
title = "Studies by Outcome Objective",
subtitle = "Of the n=32 data capturing studies",
x = NULL,
y = "Number of Studies"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 12, face = "bold", hjust = 0.5),
axis.text.y = element_text(size = 12),
axis.text.x = element_text(size = 12),
panel.grid.major.y = element_blank()
) +
# Make sure the y-axis (x after flipping) has enough room for the labels
scale_y_continuous(expand = expansion(mult = c(0, 0.1)))
setwd("~/Dropbox/DSAN5400/DSAN5400_final_project/website")
reticulate::repl_python()
