{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Topic Modeling\"\n",
        "format: \n",
        "  html:\n",
        "    code-fold: true\n",
        "    toc: true\n",
        "execute:\n",
        "  warning: false\n",
        "  message: false\n",
        "---\n",
        "\n",
        "\n",
        "![](images/topic.png){width=200px}\n",
        "\n",
        "## Introduction\n",
        "\n",
        "This analysis examines topic mentions across different news networks, with a focus on identifying the most common topics and comparing coverage patterns. We've collected data from major news networks and processed it to extract meaningful insights about their coverage priorities.\n"
      ],
      "id": "c8b4e574"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import numpy as np\n",
        "\n",
        "# Load the datasets\n",
        "fox_data = pd.read_csv('../data/topic_modeling/fox_headline_topics.csv')\n",
        "abc_data = pd.read_csv('../data/topic_modeling/abc_headline_topics.csv')\n",
        "msnbc_data = pd.read_csv('../data/topic_modeling/msnbc_headline_topics.csv')\n",
        "\n",
        "# Add source column to each dataset\n",
        "fox_data['source'] = 'Fox'\n",
        "abc_data['source'] = 'ABC'\n",
        "msnbc_data['source'] = 'MSNBC'\n",
        "\n",
        "# Combine datasets\n",
        "combined_data = pd.concat([fox_data, abc_data, msnbc_data], ignore_index=True)"
      ],
      "id": "88ea0408",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Topic Mapping and Classification\n",
        "\n",
        "First, we need to define how we'll classify the raw topic data into more meaningful categories. Our mapping function handles the messy topic data by grouping related terms into cleaner categories:\n",
        "\n",
        "## Fox News Topic Distribution\n",
        "\n",
        "Now we'll visualize how Fox News distributes its coverage across our identified topic categories. First, we will look at the top ten topics identified.\n"
      ],
      "id": "05deaa71"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "\n",
        "fox_only = combined_data[combined_data['source'] == 'Fox']\n",
        "\n",
        "fox_topic_counts = fox_only.groupby('topic')['count'].sum().reset_index()\n",
        "\n",
        "top10_fox_topics = fox_topic_counts.sort_values('count', ascending=False).head(10)\n",
        "\n",
        "print(top10_fox_topics)"
      ],
      "id": "9b6cd6dd",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Topics were grouped as follows: Police incidents combined mentions like \"police man say\" and \"man police florida\"; New York news combined messy duplicates like \"new york new york\"; Trump presidency captured \"trump president president trump\"; Man accused cleaned \"html man accused\" from scraping artifacts; and Business and politics represented \"html business president\". This condenses the top 10 topics into 5 cleaned topics.\n"
      ],
      "id": "0340cb43"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def map_to_clean_topic(topic):\n",
        "    topic = topic.lower()\n",
        "    if any(x in topic for x in ['police man say', 'man police florida', 'police man shooting', 'police say police say', 'police man report']):\n",
        "        return 'Police incidents'\n",
        "    elif any(x in topic for x in ['new york new york', 'new new york york']):\n",
        "        return 'New York news'\n",
        "    elif 'trump president president trump' in topic:\n",
        "        return 'Trump presidency'\n",
        "    elif 'html man accused' in topic:\n",
        "        return 'Man accused'\n",
        "    elif 'html business president' in topic:\n",
        "        return 'Business and politics'\n",
        "    else:\n",
        "        return None"
      ],
      "id": "c1a3c1e2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The stacked bar chart below shows the relative proportion of each topic in overall Fox News coverage:\n"
      ],
      "id": "a6d393d1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "def plot_cleaned_stacked_bar(source_name):\n",
        "    source_data = combined_data[combined_data['source'] == source_name].copy()\n",
        "    source_data['clean_topic'] = source_data['topic'].apply(map_to_clean_topic)\n",
        "    source_data = source_data.dropna(subset=['clean_topic'])\n",
        "    source_total = source_data.groupby('clean_topic')['count'].sum().reset_index()\n",
        "\n",
        "    if source_total.empty:\n",
        "        print(f\"No matching cleaned topics for {source_name}\")\n",
        "        return\n",
        "\n",
        "    fig, ax = plt.subplots(figsize=(8, 5))\n",
        "    ax.barh(['All Topics'], source_total['count'].sum(), color='lightgray', edgecolor='black')\n",
        "\n",
        "    start = 0\n",
        "    colors = ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00']\n",
        "\n",
        "    for i, row in source_total.iterrows():\n",
        "        ax.barh(\n",
        "            ['All Topics'],\n",
        "            row['count'],\n",
        "            left=start,\n",
        "            label=row['clean_topic'],\n",
        "            color=colors[i % len(colors)]\n",
        "        )\n",
        "        start += row['count']\n",
        "\n",
        "    plt.title(f'Overall Topic Mentions ({source_name})', fontsize=16)\n",
        "    plt.xlabel('Total Mentions')\n",
        "    plt.legend(title='Topic', bbox_to_anchor=(1.05, 1), loc='upper left')\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "plot_cleaned_stacked_bar('Fox')"
      ],
      "id": "d61e64ab",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The chart reveals interesting patterns in Fox News coverage. We can see a substantial focus on police incidents and New York news, with additional coverage devoted to the Trump presidency. The distribution offers insights into editorial priorities and audience interests.\n",
        "\n",
        "### Topic Coverage Trends Over Time\n",
        "\n",
        "To understand how Fox News' coverage has evolved, we'll create a heatmap showing topic mentions by year. This visualization helps identify shifting priorities in news coverage:\n"
      ],
      "id": "4ca30f78"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import seaborn as sns\n",
        "\n",
        "fox_only = combined_data[combined_data['source'] == 'Fox'].copy()\n",
        "fox_only['clean_topic'] = fox_only['topic'].apply(map_to_clean_topic)\n",
        "fox_only = fox_only.dropna(subset=['clean_topic'])\n",
        "\n",
        "fox_yearly = fox_only.groupby(['year', 'clean_topic'])['count'].sum().reset_index()\n",
        "heatmap_data = fox_yearly.pivot(index='clean_topic', columns='year', values='count').fillna(0)\n",
        "\n",
        "plt.figure(figsize=(10, 4))\n",
        "sns.heatmap(heatmap_data, cmap='YlOrRd', annot=True, fmt='.0f', linewidths=0.5)\n",
        "\n",
        "plt.title('Fox News Topic Mentions by Year (Heatmap)', fontsize=16)\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Topic')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "04c43be1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The heatmap provides a temporal dimension to our analysis, showing how topic coverage has changed over years. Particularly noteworthy are the fluctuations in police incident reporting and the coverage of the Trump presidency, which naturally varied with political cycles.\n",
        "\n",
        "## MSNBC News Topic Distribution\n",
        "\n",
        "Now weâ€™ll visualize how MSNBC News distributes its coverage across our identified topic categories. First, we will look at the top ten topics identified.\n"
      ],
      "id": "0d85ea2e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "\n",
        "msnbc_only = combined_data[combined_data['source'] == 'MSNBC']\n",
        "\n",
        "msnbc_topic_counts = msnbc_only.groupby('topic')['count'].sum().reset_index()\n",
        "\n",
        "top10_msnbc_topics = msnbc_topic_counts.sort_values('count', ascending=False).head(10)\n",
        "\n",
        "print(top10_msnbc_topics)"
      ],
      "id": "a0a41899",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "We grouped similar MSNBC topics together by combining all mentions related to Trump, including elections, impeachment, and Ukraine, into a single Trump-related category. Separate categories were created for Biden, Obama, Supreme Court, COVID vaccine, and DeSantis to better reflect the main themes while reducing repetition across topics.\n"
      ],
      "id": "0ba6e521"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# 1. Define NEW topic mapping for MSNBC\n",
        "def map_to_clean_topic_msnbc(topic):\n",
        "    topic = topic.lower()\n",
        "    if any(x in topic for x in ['trump donald donald trump', 'trump president president trump', 'trump election coronavirus', 'trump ukraine giuliani', 'trump trump impeachment impeachment']):\n",
        "        return 'Trump-related'\n",
        "    elif 'biden joe joe biden' in topic:\n",
        "        return 'Biden-related'\n",
        "    elif 'obama president president obama' in topic:\n",
        "        return 'Obama-related'\n",
        "    elif 'court supreme supreme court' in topic:\n",
        "        return 'Supreme Court'\n",
        "    elif 'covid vaccine covid vaccine' in topic:\n",
        "        return 'COVID vaccine'\n",
        "    elif 'desantis florida ron' in topic:\n",
        "        return 'DeSantis-related'\n",
        "    else:\n",
        "        return None\n",
        "\n",
        "# 2. Define plotting function\n",
        "def plot_cleaned_stacked_bar_msnbc(source_name):\n",
        "    source_data = combined_data[combined_data['source'] == source_name].copy()\n",
        "    source_data['clean_topic'] = source_data['topic'].apply(map_to_clean_topic_msnbc)\n",
        "    source_data = source_data.dropna(subset=['clean_topic'])\n",
        "    source_total = source_data.groupby('clean_topic')['count'].sum().reset_index()\n",
        "\n",
        "    if source_total.empty:\n",
        "        print(f\"No matching cleaned topics for {source_name}\")\n",
        "        return\n",
        "\n",
        "    fig, ax = plt.subplots(figsize=(8, 5))\n",
        "    ax.barh(['All Topics'], source_total['count'].sum(), color='lightgray', edgecolor='black')\n",
        "\n",
        "    start = 0\n",
        "    colors = ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#a65628']  # 6 colors\n",
        "\n",
        "    for i, row in source_total.iterrows():\n",
        "        ax.barh(\n",
        "            ['All Topics'],\n",
        "            row['count'],\n",
        "            left=start,\n",
        "            label=row['clean_topic'],\n",
        "            color=colors[i % len(colors)]\n",
        "        )\n",
        "        start += row['count']\n",
        "\n",
        "    plt.title(f'Overall Topic Mentions ({source_name})', fontsize=16)\n",
        "    plt.xlabel('Total Mentions')\n",
        "    plt.legend(title='Topic', bbox_to_anchor=(1.05, 1), loc='upper left')\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "# 3. Plot it for MSNBC\n",
        "plot_cleaned_stacked_bar_msnbc('MSNBC')"
      ],
      "id": "8742f623",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "On MSNBC, Trump-related topics overwhelmingly dominated overall mentions.\n",
        "\n",
        "### Topic Coverage Trends Over Time\n",
        "\n",
        "To understand how MSNBC Newsâ€™ coverage has evolved, weâ€™ll create a heatmap showing topic mentions by year. This visualization helps identify shifting priorities in news coverage:\n"
      ],
      "id": "0a026105"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# 1. Map topics (reuse the same function)\n",
        "def map_to_clean_topic_msnbc(topic):\n",
        "    topic = topic.lower()\n",
        "    if any(x in topic for x in ['trump donald donald trump', 'trump president president trump', 'trump election coronavirus', 'trump ukraine giuliani', 'trump trump impeachment impeachment']):\n",
        "        return 'Trump-related'\n",
        "    elif 'biden joe joe biden' in topic:\n",
        "        return 'Biden-related'\n",
        "    elif 'obama president president obama' in topic:\n",
        "        return 'Obama-related'\n",
        "    elif 'court supreme supreme court' in topic:\n",
        "        return 'Supreme Court'\n",
        "    elif 'covid vaccine covid vaccine' in topic:\n",
        "        return 'COVID vaccine'\n",
        "    elif 'desantis florida ron' in topic:\n",
        "        return 'DeSantis-related'\n",
        "    else:\n",
        "        return None\n",
        "\n",
        "# 2. Prepare MSNBC data\n",
        "msnbc_only = combined_data[combined_data['source'] == 'MSNBC'].copy()\n",
        "msnbc_only['clean_topic'] = msnbc_only['topic'].apply(map_to_clean_topic_msnbc)\n",
        "msnbc_only = msnbc_only.dropna(subset=['clean_topic'])\n",
        "\n",
        "# 3. Group by year and clean topic\n",
        "msnbc_yearly = msnbc_only.groupby(['year', 'clean_topic'])['count'].sum().reset_index()\n",
        "\n",
        "# 4. Pivot for heatmap\n",
        "heatmap_data = msnbc_yearly.pivot(index='clean_topic', columns='year', values='count').fillna(0)\n",
        "\n",
        "# 5. Plot heatmap\n",
        "plt.figure(figsize=(10, 4))\n",
        "sns.heatmap(heatmap_data, cmap='YlOrRd', annot=True, fmt='.0f', linewidths=0.5)\n",
        "\n",
        "plt.title('MSNBC Topic Mentions by Year (Heatmap)', fontsize=16)\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Topic')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "353d8e48",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "On MSNBC, Trump-related coverage dominated between 2019 and 2020, peaking sharply during the impeachment and election periods. Biden-related mentions appeared mainly in 2020, while COVID vaccine and DeSantis-related topics emerged later in 2020 and 2023, respectively. Mentions of Obama and the Supreme Court were more limited and concentrated earlier in the decade.\n",
        "\n",
        "## ABC News Topic Distribution\n",
        "\n",
        "Now weâ€™ll visualize how ABC News distributes its coverage across our identified topic categories. First, we will look at the top ten topics identified.\n"
      ],
      "id": "ba61ec9f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "\n",
        "abc_only = combined_data[combined_data['source'] == 'ABC']\n",
        "\n",
        "abc_topic_counts = abc_only.groupby('topic')['count'].sum().reset_index()\n",
        "\n",
        "top10_abc_topics = abc_topic_counts.sort_values('count', ascending=False).head(10)\n",
        "\n",
        "print(top10_abc_topics)"
      ],
      "id": "4559cbf6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "For ABC, the majority of top topics were grouped under Police incidents, combining various mentions of police shootings, deaths, and related events. General deaths (unrelated to police) were kept separate, while mentions of Obama and Trump were grouped into their own categories based on political coverage.\n"
      ],
      "id": "e0c7f620"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# 1. Define new mapping function for ABC\n",
        "def map_to_clean_topic_abc(topic):\n",
        "    topic = topic.lower()\n",
        "    if any(x in topic for x in [\n",
        "        'police man killed', 'man police shooting', 'police man shooting', \n",
        "        'police man death', 'police man dead', 'man police death', 'police man black']):\n",
        "        return 'Police incidents'\n",
        "    elif 'man dies year' in topic:\n",
        "        return 'General deaths'\n",
        "    elif 'obama court latest' in topic:\n",
        "        return 'Obama-related'\n",
        "    elif 'judge trumps house' in topic:\n",
        "        return 'Trump-related'\n",
        "    else:\n",
        "        return None\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def plot_cleaned_stacked_bar_abc(source_name):\n",
        "    source_data = combined_data[combined_data['source'] == source_name].copy()\n",
        "    source_data['clean_topic'] = source_data['topic'].apply(map_to_clean_topic_abc)\n",
        "    source_data = source_data.dropna(subset=['clean_topic'])\n",
        "    source_total = source_data.groupby('clean_topic')['count'].sum().reset_index()\n",
        "\n",
        "    if source_total.empty:\n",
        "        print(f\"No matching cleaned topics for {source_name}\")\n",
        "        return\n",
        "\n",
        "    fig, ax = plt.subplots(figsize=(8, 5))\n",
        "    ax.barh(['All Topics'], source_total['count'].sum(), color='lightgray', edgecolor='black')\n",
        "\n",
        "    start = 0\n",
        "    colors = ['#e41a1c', '#377eb8', '#4daf4a', '#984ea3']  # 4 categories, 4 colors\n",
        "\n",
        "    for i, row in source_total.iterrows():\n",
        "        ax.barh(\n",
        "            ['All Topics'],\n",
        "            row['count'],\n",
        "            left=start,\n",
        "            label=row['clean_topic'],\n",
        "            color=colors[i % len(colors)]\n",
        "        )\n",
        "        start += row['count']\n",
        "\n",
        "    plt.title(f'Overall Topic Mentions ({source_name})', fontsize=16)\n",
        "    plt.xlabel('Total Mentions')\n",
        "    plt.legend(title='Topic', bbox_to_anchor=(1.05, 1), loc='upper left')\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "# Call it\n",
        "plot_cleaned_stacked_bar_abc('ABC')"
      ],
      "id": "0fa5807c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Topic Coverage Trends Over Time\n",
        "\n",
        "To understand how ABC Newsâ€™ coverage has evolved, weâ€™ll create a heatmap showing topic mentions by year. This visualization helps identify shifting priorities in news coverage:\n"
      ],
      "id": "64a6bc90"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# 1. Map topics (already defined earlier as map_to_clean_topic_abc)\n",
        "\n",
        "# 2. Prepare ABC data\n",
        "abc_only = combined_data[combined_data['source'] == 'ABC'].copy()\n",
        "abc_only['clean_topic'] = abc_only['topic'].apply(map_to_clean_topic_abc)\n",
        "abc_only = abc_only.dropna(subset=['clean_topic'])\n",
        "\n",
        "# 3. Group by year and cleaned topic\n",
        "abc_yearly = abc_only.groupby(['year', 'clean_topic'])['count'].sum().reset_index()\n",
        "\n",
        "# 4. Pivot for heatmap\n",
        "heatmap_data = abc_yearly.pivot(index='clean_topic', columns='year', values='count').fillna(0)\n",
        "\n",
        "# 5. Plot heatmap\n",
        "plt.figure(figsize=(10, 4))\n",
        "sns.heatmap(heatmap_data, cmap='YlOrRd', annot=True, fmt='.0f', linewidths=0.5)\n",
        "\n",
        "plt.title('ABC Topic Mentions by Year (Heatmap)', fontsize=16)\n",
        "plt.xlabel('Year')\n",
        "plt.ylabel('Topic')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "481a7b93",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "On ABC, Police incidents dominated coverage from 2016 onward, peaking sharply in 2022. General deaths and Obama-related mentions were mainly concentrated around 2016â€“2017, while Trump-related coverage appeared notably later in 2025.\n",
        "\n",
        "## Presidential Candidate Analysis\n",
        "\n",
        "i dont know why this is only saying like 500 trumps this needs to be fixed \n"
      ],
      "id": "bfeca3cc"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "combined_data = pd.concat([fox_data, abc_data, msnbc_data], ignore_index=True)\n",
        "# Filter Trump topics\n",
        "trump_mentions = combined_data[\n",
        "    combined_data['topic'].str.contains('trump', case=False, na=False) |\n",
        "    combined_data['topic'].str.contains('donald', case=False, na=False)\n",
        "]\n",
        "\n",
        "# Filter Hillary, Biden, OR Kamala topics\n",
        "hbk_mentions = combined_data[\n",
        "    combined_data['topic'].str.contains('hillary', case=False, na=False) |\n",
        "    combined_data['topic'].str.contains('biden', case=False, na=False) |\n",
        "    combined_data['topic'].str.contains('kamala', case=False, na=False)\n",
        "]\n",
        "\n",
        "# Group by source only (no year)\n",
        "trump_counts = trump_mentions.groupby('source').size().reset_index(name='count_trump')\n",
        "hbk_counts = hbk_mentions.groupby('source').size().reset_index(name='count_hbk')\n",
        "\n",
        "# Merge Trump and Hillary/Biden/Kamala counts\n",
        "merged = pd.merge(trump_counts, hbk_counts, on='source', how='outer').fillna(0)\n",
        "\n",
        "# Plot\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "sources = merged['source'].unique()\n",
        "x = np.arange(len(sources))  # the label locations\n",
        "width = 0.35  # width of the bars\n",
        "\n",
        "plt.figure(figsize=(6, 4))\n",
        "\n",
        "plt.bar(x - width/2, merged['count_trump'], width=width, label='Trump', color='red', alpha=0.8)\n",
        "plt.bar(x + width/2, merged['count_hbk'], width=width, label='Hillary/Biden/Kamala', color='blue', alpha=0.8)\n",
        "\n",
        "plt.title('Overall Mentions of Trump vs Hillary/Biden/Kamala by News Source', fontsize=12)\n",
        "plt.xlabel('News Source')\n",
        "plt.ylabel('Total Mentions')\n",
        "plt.xticks(x, sources)\n",
        "plt.legend()\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "3f702e24",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Trump overwhelmingly consumes the media. \n",
        "\n",
        "## Conclusion"
      ],
      "id": "22e959be"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}